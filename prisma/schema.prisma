generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id              Int      @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String
  password             String
  phone_number         String
  wallet_id            Int?     @unique
  forex_wallet_id      Int?     @unique
  account_created_on   DateTime
  role_id              Int     
  wallet               Wallet?   @relation(fields: [wallet_id], references: [wallet_id]) // 1->1
  forex_wallet         Forex_Wallet? @relation(fields: [forex_wallet_id], references: [forex_wallet_id])
  role                 Role     @relation(fields: [role_id], references: [role_id])
  posts                Post[] // 1->*
}

model Post {
  id          Int      @id @default(autoincrement())
  post_title  String
  post_content String   @db.Text
  posted_on   DateTime @default(now())
  user_id     Int
  user         User     @relation(fields: [user_id], references: [user_id]) // *->1
}

model Role {
  role_id      Int     @id
  role_name    String
  user         User[]
}

model Wallet {
  wallet_id            Int       @id @default(autoincrement())
  wallet_created_on    DateTime
  currency_storage     Currency_Storage[]
  user                 User?
  uu_trns_sender       User_to_User_Transaction[] @relation("uu_trns_sender_wallet")
  uu_trns_recipient    User_to_User_Transaction[] @relation("uu_trns_recipient_wallet")
  inner_trns           Inner_Transaction[]
  ext_trns             External_Transaction[]
  wfw_trns             Wallet_Forex_Wallet_Transaction[]
}

model Forex_Wallet {
  forex_wallet_id         Int @id
  forex_wallet_created_on DateTime
  user                    User?
  forex_currency_storage  Forex_Currency_Storage[]
  wfw_trns                Wallet_Forex_Wallet_Transaction[]
}

model Currency {
  currency_id             Int      @id @default(autoincrement())
  currency_name           String
  currency_storage        Currency_Storage[]
  forex_currency_storage  Forex_Currency_Storage[]
  currency_pair_sell      Currency_Pair[] @relation("currency_sell")
  currency_pair_buy       Currency_Pair[] @relation("currency_buy")
  ext_trns                External_Transaction[]
  wfw_trns                Wallet_Forex_Wallet_Transaction[]
}

model Currency_Storage {
  currency_storage_id Int     @id @default(autoincrement())
  currency_amount     Float
  currency_id         Int
  wallet_id           Int
  currency            Currency @relation(fields: [currency_id], references: [currency_id])
  wallet              Wallet  @relation(fields: [wallet_id], references: [wallet_id])
}

model Forex_Currency_Storage {
  forex_currency_storage_id Int @id
  forex_currency_id         Int 
  forex_currency_amount     Float
  forex_wallet_id           Int
  currency                  Currency @relation(fields: [forex_currency_id], references: [currency_id])
  forex_wallet              Forex_Wallet @relation(fields: [forex_wallet_id], references: [forex_wallet_id])
}

model Currency_Pair {
  currency_pair_id  Int @id @default(autoincrement())
  sell_currency_id  Int
  buy_currency_id   Int
  conversion_value  Float
  selling_currency  Currency @relation("currency_sell", fields: [sell_currency_id], references: [currency_id])
  buying_currency   Currency @relation("currency_buy", fields: [buy_currency_id], references: [currency_id])
  uu_trns           User_to_User_Transaction[]
  inner_trns        Inner_Transaction[]
  spec_trns         Speculative_Transaction[]
}

model User_to_User_Transaction {
  transaction_id         String   @id
  wallet_sender_id       Int      
  wallet_recipient_id    Int      
  currency_pair_id       Int            
  sender_wallet          Wallet     @relation("uu_trns_sender_wallet", fields: [wallet_sender_id], references: [wallet_id])
  recipient_wallet       Wallet     @relation("uu_trns_recipient_wallet", fields: [wallet_recipient_id], references: [wallet_id]) 
  currency_pair          Currency_Pair   @relation(fields: [currency_pair_id], references: [currency_pair_id])
  inital_amount          Float
  converted_amount       Float
  transaction_date       DateTime
}

model Inner_Transaction {
  inner_transaction_id String @id
  wallet_id            Int
  currency_pair_id     Int
  inital_amount        Float
  converted_amount     Float
  transaction_date     DateTime
  wallet               Wallet @relation(fields: [wallet_id], references: [wallet_id])
  currency_pair        Currency_Pair @relation(fields: [currency_pair_id], references: [currency_pair_id])
}

model External_Transaction {
  external_transaction_id String @id
  wallet_id               Int    
  currency_id             Int    
  bank_account            String
  transaction_amount      Int
  transaction_commision   Float
  transaction_date        DateTime
  wallet                  Wallet @relation(fields: [wallet_id], references: [wallet_id])
  currency                Currency @relation(fields: [currency_id], references: [currency_id])
}

model Wallet_Forex_Wallet_Transaction {
  wallet_forex_wallet_transaction_id Int @id
  wallet_id                          Int
  forex_wallet_id                    Int
  currency_id                        Int
  amount                             Float
  transaction_date                   DateTime
  wallet                             Wallet @relation(fields: [wallet_id], references: [wallet_id])
  forex_wallet                       Forex_Wallet @relation(fields: [forex_wallet_id], references: [forex_wallet_id])
  currency                           Currency @relation(fields: [currency_id], references: [currency_id])
}

model Speculative_Transaction {
  speculative_transaction_id Int @id
  transaction_type           Int
  currency_pair_id           Int
  financial_leverage         Int
  lots                       Float
  entry_course_value         Float
  exit_course_value          Float?
  transaction_balance        Float
  entry_date                 DateTime
  exit_date                  DateTime?
  authors_profit             Float
  currency_pair              Currency_Pair @relation(fields: [currency_pair_id], references: [currency_pair_id])
}
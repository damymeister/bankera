generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String
  password             String
  phone_number         String
  wallet_id            Int?          @unique
  forex_wallet_id      Int?          @unique
  account_created_on   DateTime
  role_id              Int     
  wallet               Wallet?       @relation(fields: [wallet_id], references: [id]) // 1->1
  forex_wallet         Forex_Wallet? @relation(fields: [forex_wallet_id], references: [id])
  role                 Role          @relation(fields: [role_id], references: [id])
  posts                Post[] // 1->*
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text
  posted_on   DateTime @default(now())
  user_id     Int
  image_href  String?  @db.Text
  user        User     @relation(fields: [user_id], references: [id]) // *->1
}

model Role {
  id      Int     @id
  name    String
  user    User[]
}

model Wallet {
  id                   Int                        @id @default(autoincrement())
  created_on           DateTime
  currency_storage     Currency_Storage[]
  user                 User?
  uu_trns_sender       User_to_User_Transaction[] @relation("uu_trns_sender_wallet")
  uu_trns_recipient    User_to_User_Transaction[] @relation("uu_trns_recipient_wallet")
  inner_trns           Inner_Transaction[]
  wfw_trns             Wallet_Forex_Wallet_Transaction[]
}

model Forex_Wallet {
  id                      Int @id @default(autoincrement())
  created_on              DateTime
  user                    User?
  forex_currency_storage  Forex_Currency_Storage[]
  wfw_trns                Wallet_Forex_Wallet_Transaction[]
  sp_trns                 Speculative_Transaction[]
}

model Currency {
  id                      Int                 @id @default(autoincrement())
  name                    String
  currency_storage        Currency_Storage[]
  forex_currency_storage  Forex_Currency_Storage[]
  currency_pair_sell      Currency_Pair[]     @relation("currency_sell")
  currency_pair_buy       Currency_Pair[]     @relation("currency_buy")
  currency_history_sell   Currency_History[]  @relation("currency_history_sell")
  currency_history_buy    Currency_History[]  @relation("currency_history_buy")
  wfw_trns                Wallet_Forex_Wallet_Transaction[]
  uu_trns           	  User_to_User_Transaction[]
}

model Currency_Storage {
  id                  Int       @id @default(autoincrement())
  amount              Float
  currency_id         Int
  wallet_id           Int
  currency            Currency  @relation(fields: [currency_id], references: [id])
  wallet              Wallet    @relation(fields: [wallet_id], references: [id])
}

model Forex_Currency_Storage {
  id                        Int          @id @default(autoincrement())
  forex_currency_id         Int 
  forex_currency_amount     Float
  forex_wallet_id           Int
  currency                  Currency     @relation(fields: [forex_currency_id], references: [id])
  forex_wallet              Forex_Wallet @relation(fields: [forex_wallet_id], references: [id])
}

model Currency_Pair {
  id  Int @id @default(autoincrement())
  sell_currency_id  Int
  buy_currency_id   Int
  conversion_value  Float
  selling_currency  Currency @relation("currency_sell", fields: [sell_currency_id], references: [id])
  buying_currency   Currency @relation("currency_buy", fields: [buy_currency_id], references: [id])
  inner_trns        Inner_Transaction[]
  spec_trns         Speculative_Transaction[]
  @@unique([sell_currency_id, buy_currency_id], name: "unique_pair")
  @@index([sell_currency_id, buy_currency_id])
}

model Currency_History {
  id                Int       @id @default(autoincrement())
  sell_currency_id  Int
  buy_currency_id   Int
  conversion_value  Float
  date              DateTime
  selling_currency  Currency  @relation("currency_history_sell", fields: [sell_currency_id], references: [id])
  buying_currency   Currency  @relation("currency_history_buy", fields: [buy_currency_id], references: [id])
  @@index([sell_currency_id, buy_currency_id])
}

model User_to_User_Transaction {
  id                     Int   @id @default(autoincrement())
  wallet_sender_id       Int      
  wallet_recipient_id    Int      
  currency_id            Int            
  sender_wallet          Wallet     @relation("uu_trns_sender_wallet", fields: [wallet_sender_id], references: [id])
  recipient_wallet       Wallet     @relation("uu_trns_recipient_wallet", fields: [wallet_recipient_id], references: [id]) 
  currency               Currency   @relation(fields: [currency_id], references: [id])
  amount                 Float
  transaction_date       DateTime
}


model Inner_Transaction {
  id                   Int            @id @default(autoincrement())
  wallet_id            Int
  currency_pair_id     Int
  inital_amount        Float
  converted_amount     Float
  transaction_date     DateTime
  wallet               Wallet         @relation(fields: [wallet_id], references: [id])
  currency_pair        Currency_Pair  @relation(fields: [currency_pair_id], references: [id])
}

model Wallet_Forex_Wallet_Transaction {
  id                                 Int          @id @default(autoincrement())
  wallet_id                          Int
  forex_wallet_id                    Int
  currency_id                        Int
  amount                             Float
  transaction_date                   DateTime
  wallet                             Wallet       @relation(fields: [wallet_id], references: [id])
  forex_wallet                       Forex_Wallet @relation(fields: [forex_wallet_id], references: [id])
  currency                           Currency     @relation(fields: [currency_id], references: [id])
}

model Speculative_Transaction {
  id                         Int           @id @default(autoincrement())
  forex_wallet_id            Int
  transaction_type           Int
  currency_pair_id           Int
  financial_leverage         Int
  lots                       Float
  entry_course_value         Float
  exit_course_value          Float?
  transaction_balance        Float
  entry_date                 DateTime
  exit_date                  DateTime?
  currency_pair              Currency_Pair @relation(fields: [currency_pair_id], references: [id])
  forex_wallet               Forex_Wallet  @relation(fields: [forex_wallet_id], references: [id])
}